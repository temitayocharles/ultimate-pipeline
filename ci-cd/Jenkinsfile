pipeline {
    agent any

    tools {
        jdk 'java17'
        maven 'maven3.6'
    }
    
    environment {
        APP_NAME = "boardgame"
        DOCKER_IMAGE = "temitayocharles/boardgame"
        DOCKER_TAG = "${BUILD_NUMBER}"
        SONAR_URL = "http://nexus-sonarqube.ultimate-cicd-devops.local:9000"
        NEXUS_URL = "http://nexus-sonarqube.ultimate-cicd-devops.local:8081"
    }
    
    stages {
        
        stage('Git Checkout') {
            steps {
                git branch: 'main', url: 'https://github.com/temitayocharles/ultimate-pipeline.git'
            }
        }
        
        stage('Compile') {
            steps {
                dir('app') {
                    sh 'mvn compile'
                }
            }
        }
        
        stage('Unit Tests') {
            steps {
                dir('app') {
                    sh 'mvn test'
                }
            }
        }
        
        stage('SonarQube Analysis') {
            steps {
                dir('app') {
                    script {
                        withSonarQubeEnv('sonar-server') {
                            sh '''
                                mvn sonar:sonar \
                                -Dsonar.projectKey=Boardgame \
                                -Dsonar.projectName=Boardgame \
                                -Dsonar.java.binaries=target/classes
                            '''
                        }
                    }
                }
            }
        }
        
        stage('Quality Gate') {
            steps {
                script {
                    timeout(time: 5, unit: 'MINUTES') {
                        def qg = waitForQualityGate()
                        if (qg.status != 'OK') {
                            error "Pipeline aborted due to quality gate failure: ${qg.status}"
                        }
                    }
                }
            }
        }
        
        stage('Build Application') {
            steps {
                dir('app') {
                    sh 'mvn clean package -DskipTests'
                }
            }
        }
        
        stage('Publish to Nexus') {
            steps {
                dir('app') {
                    script {
                        withMaven(globalMavenSettingsConfig: 'maven-settings') {
                            sh 'mvn deploy -DskipTests'
                        }
                    }
                }
            }
        }
        
        stage('Build Docker Image') {
            steps {
                dir('app') {
                    script {
                        docker.build("${DOCKER_IMAGE}:${DOCKER_TAG}")
                        docker.build("${DOCKER_IMAGE}:latest")
                    }
                }
            }
        }
        
        stage('Trivy Image Scan') {
            steps {
                script {
                    sh """
                        trivy image --format table \
                        --severity HIGH,CRITICAL \
                        ${DOCKER_IMAGE}:${DOCKER_TAG}
                    """
                }
            }
        }
        
        stage('Push Docker Image') {
            steps {
                script {
                    withDockerRegistry(credentialsId: 'docker-hub-creds', url: 'https://index.docker.io/v1/') {
                        docker.image("${DOCKER_IMAGE}:${DOCKER_TAG}").push()
                        docker.image("${DOCKER_IMAGE}:latest").push()
                    }
                }
            }
        }
        
        stage('Deploy to Kubernetes') {
            steps {
                script {
                    withKubeConfig(caCertificate: '', clusterName: '', contextName: '', credentialsId: 'k8s-creds', namespace: 'default', restrictKubeConfigAccess: false, serverUrl: '') {
                        sh '''
                            kubectl apply -f kubernetes/deployment-service.yaml
                            kubectl rollout status deployment/boardgame-deployment
                            kubectl get svc boardgame-ssvc
                        '''
                    }
                }
            }
        }
        
        stage('Verify Deployment') {
            steps {
                script {
                    withKubeConfig(caCertificate: '', clusterName: '', contextName: '', credentialsId: 'k8s-creds', namespace: 'default', restrictKubeConfigAccess: false, serverUrl: '') {
                        sh '''
                            kubectl get pods -l app=boardgame
                            kubectl get svc boardgame-ssvc
                        '''
                    }
                }
            }
        }
    }
    
    post {
        always {
            echo 'Pipeline execution completed'
            cleanWs()
        }
        success {
            echo 'SUCCESS: Pipeline succeeded! Application deployed successfully.'
        }
        failure {
            echo 'ERROR: Pipeline failed. Check logs for details.'
        }
    }
}
